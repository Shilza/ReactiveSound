import {Waveform} from "./index";
import {render, cleanup, fireEvent} from 'react-testing-library';
import React from "react";
import {Provider} from "react-redux";
import configureStore from 'redux-mock-store';
import {SET_CURRENT_TIME} from "../../../common/actionTypes";
import {seek} from "../../../common/middlewares";
import {seekTo, setCurrentTime} from "../../../common/actionCreators";

describe('Test Waveform', () => {
    afterEach(cleanup);

    const id = 5;

    it('should contain loader', () => {
        const {container, queryByTestId} = render(<Waveform waveform={undefined} id={id}/>);
        const loader = queryByTestId('loader');
        expect(container).toContainElement(loader);
    });

    it('should contain loader', () => {
        const waveform = {
            width: 1800,
            height: 140,
            samples: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 58, 64, 119, 122, 108, 119, 118, 120, 120, 115, 112, 113, 126, 111, 94, 113, 106, 125, 122, 104, 73, 75, 79, 129, 104, 103, 116, 115, 121, 131, 123, 99, 126, 121, 120, 126, 112, 71, 73, 90, 125, 122, 105, 87, 90, 98, 130, 104, 89, 61, 72, 117, 126, 115, 127, 122, 122, 132, 131, 125, 124, 123, 120, 128, 130, 115, 129, 111, 120, 128, 127, 88, 126, 123, 124, 130, 95, 119, 120, 115, 122, 121, 105, 101, 73, 69, 126, 109, 109, 99, 84, 129, 121, 132, 130, 131, 124, 125, 124, 116, 136, 127, 101, 116, 131, 127, 132, 106, 126, 132, 117, 136, 133, 134, 129, 127, 128, 134, 134, 117, 127, 118, 134, 136, 123, 120, 105, 131, 134, 130, 105, 125, 123, 118, 135, 126, 125, 132, 130, 127, 135, 130, 121, 129, 136, 134, 131, 116, 127, 129, 133, 134, 123, 91, 130, 132, 108, 136, 131, 134, 131, 131, 134, 130, 134, 127, 115, 127, 137, 120, 121, 120, 129, 121, 135, 111, 116, 123, 93, 134, 130, 121, 132, 94, 134, 135, 135, 123, 128, 129, 127, 139, 118, 105, 103, 133, 135, 133, 101, 125, 128, 126, 136, 135, 122, 130, 127, 129, 136, 135, 114, 131, 117, 130, 135, 130, 127, 115, 129, 138, 124, 101, 125, 124, 124, 137, 134, 119, 133, 136, 133, 136, 132, 129, 125, 131, 137, 129, 122, 124, 130, 126, 137, 116, 102, 126, 125, 110, 135, 124, 129, 122, 128, 136, 130, 128, 122, 124, 123, 135, 125, 117, 121, 130, 130, 135, 112, 116, 130, 95, 132, 134, 120, 126, 103, 128, 138, 128, 120, 129, 120, 114, 123, 124, 127, 131, 130, 129, 111, 108, 127, 129, 122, 123, 128, 127, 124, 127, 125, 121, 120, 101, 128, 124, 124, 129, 128, 111, 105, 120, 118, 93, 119, 128, 126, 126, 128, 130, 125, 130, 128, 126, 122, 118, 130, 131, 128, 128, 129, 125, 126, 120, 125, 130, 107, 120, 124, 130, 122, 128, 124, 132, 122, 132, 125, 119, 126, 127, 122, 119, 128, 131, 133, 132, 129, 136, 130, 132, 131, 126, 131, 128, 125, 126, 128, 122, 131, 131, 124, 128, 130, 127, 131, 132, 128, 131, 134, 130, 135, 135, 131, 133, 133, 133, 136, 131, 133, 130, 133, 132, 136, 131, 132, 133, 131, 132, 134, 129, 130, 133, 134, 134, 128, 131, 134, 136, 134, 136, 130, 133, 136, 135, 135, 140, 135, 131, 131, 136, 135, 133, 129, 132, 132, 131, 134, 125, 133, 135, 133, 132, 136, 135, 134, 132, 133, 133, 133, 132, 130, 135, 128, 135, 131, 134, 134, 132, 132, 134, 132, 131, 130, 133, 134, 135, 135, 133, 134, 133, 134, 135, 133, 134, 132, 136, 134, 130, 130, 132, 130, 135, 133, 133, 132, 131, 133, 135, 128, 136, 131, 133, 133, 138, 131, 132, 133, 134, 136, 134, 129, 133, 128, 133, 134, 131, 132, 132, 132, 136, 134, 130, 138, 131, 131, 135, 136, 133, 134, 133, 133, 132, 130, 132, 133, 132, 132, 134, 130, 133, 133, 134, 137, 134, 135, 136, 130, 132, 133, 136, 130, 134, 137, 129, 132, 130, 130, 134, 134, 132, 134, 132, 133, 133, 133, 136, 119, 133, 132, 122, 122, 121, 132, 123, 128, 132, 129, 135, 113, 104, 106, 130, 134, 128, 101, 131, 125, 117, 136, 136, 105, 133, 128, 127, 137, 133, 125, 132, 126, 135, 133, 127, 129, 131, 131, 135, 124, 108, 126, 120, 123, 135, 132, 136, 121, 128, 136, 138, 130, 128, 127, 133, 138, 132, 130, 122, 128, 115, 134, 105, 110, 128, 122, 135, 136, 132, 132, 123, 130, 133, 131, 126, 127, 118, 125, 137, 124, 121, 123, 131, 133, 129, 109, 130, 112, 97, 135, 126, 109, 133, 126, 126, 136, 131, 121, 133, 127, 134, 137, 111, 117, 110, 130, 133, 128, 103, 132, 128, 127, 137, 132, 118, 127, 125, 133, 135, 121, 121, 120, 133, 136, 131, 126, 128, 128, 128, 134, 125, 103, 124, 120, 132, 137, 136, 133, 122, 126, 132, 136, 124, 126, 128, 113, 134, 130, 130, 129, 132, 112, 136, 119, 123, 124, 122, 135, 137, 133, 130, 110, 128, 137, 133, 113, 129, 135, 125, 134, 124, 134, 127, 130, 130, 135, 123, 123, 125, 114, 133, 134, 123, 134, 124, 122, 135, 133, 123, 129, 123, 125, 126, 124, 127, 128, 117, 123, 102, 115, 126, 126, 111, 132, 134, 122, 123, 125, 127, 125, 110, 125, 129, 125, 120, 120, 127, 123, 122, 125, 124, 107, 123, 130, 130, 127, 132, 129, 130, 121, 128, 127, 119, 118, 128, 128, 127, 130, 130, 131, 130, 118, 128, 123, 125, 122, 128, 125, 128, 127, 122, 127, 123, 132, 124, 122, 121, 130, 124, 119, 125, 129, 127, 127, 131, 132, 124, 130, 130, 130, 129, 133, 131, 128, 133, 123, 127, 127, 125, 126, 130, 134, 131, 129, 136, 129, 131, 135, 134, 130, 130, 131, 131, 132, 137, 134, 136, 134, 129, 132, 136, 132, 135, 131, 134, 134, 131, 133, 130, 134, 130, 133, 130, 130, 135, 134, 135, 138, 133, 133, 137, 133, 134, 133, 134, 137, 132, 135, 134, 133, 132, 135, 132, 130, 132, 130, 134, 135, 134, 135, 131, 134, 135, 133, 135, 134, 130, 128, 130, 132, 132, 135, 133, 132, 132, 129, 134, 134, 135, 130, 133, 133, 135, 129, 133, 132, 135, 132, 134, 135, 132, 134, 136, 135, 133, 128, 130, 134, 128, 138, 126, 130, 131, 137, 136, 134, 133, 133, 135, 134, 138, 134, 130, 130, 131, 135, 134, 135, 133, 129, 132, 132, 138, 130, 135, 133, 135, 136, 136, 130, 136, 133, 133, 137, 129, 135, 130, 133, 137, 139, 134, 134, 131, 129, 133, 134, 129, 132, 133, 137, 137, 134, 134, 132, 134, 133, 135, 129, 134, 131, 130, 130, 132, 128, 133, 134, 132, 132, 132, 131, 132, 132, 135, 132, 130, 114, 127, 134, 125, 130, 122, 121, 128, 127, 136, 133, 105, 128, 131, 125, 134, 134, 120, 131, 129, 121, 136, 100, 128, 132, 127, 138, 136, 122, 127, 125, 100, 137, 125, 126, 122, 131, 130, 135, 126, 120, 133, 131, 135, 135, 128, 132, 117, 130, 136, 134, 130, 134, 130, 117, 135, 121, 121, 128, 127, 135, 136, 122, 124, 125, 110, 134, 129, 128, 128, 132, 132, 137, 131, 125, 127, 114, 136, 135, 129, 126, 126, 130, 134, 134, 119, 135, 129, 125, 136, 131, 125, 128, 129, 132, 136, 133, 127, 133, 126, 134, 133, 116, 130, 120, 125, 135, 125, 112, 131, 126, 124, 135, 110, 130, 128, 125, 136, 131, 112, 128, 125, 120, 135, 130, 121, 129, 128, 124, 133, 116, 119, 131, 115, 129, 133, 107, 131, 118, 127, 135, 125, 127, 132, 116, 108, 134, 125, 130, 131, 130, 137, 132, 111, 126, 126, 89, 138, 122, 107, 131, 127, 122, 134, 116, 127, 134, 127, 135, 137, 110, 131, 125, 133, 136, 131, 77, 131, 120, 115, 136, 129, 106, 133, 130, 132, 134, 106, 126, 114, 93, 135, 130, 99, 132, 114, 111, 128, 112, 115, 132, 115, 131, 136, 132, 136, 133, 123, 112, 111, 100, 105, 97, 87, 136, 135, 103, 137, 110, 112, 119, 124, 132, 126, 125, 137, 129, 116, 134, 135, 131, 120, 106, 103, 114, 111, 111, 136, 114, 136, 132, 127, 118, 115, 127, 134, 120, 128, 137, 135, 106, 138, 130, 100, 125, 125, 134, 134, 119, 133, 134, 115, 136, 128, 114, 124, 118, 109, 127, 132, 118, 104, 115, 112, 131, 122, 75, 80, 112, 125, 132, 122, 121, 123, 126, 124, 120, 123, 113, 107, 117, 134, 124, 109, 125, 125, 111, 127, 131, 121, 122, 120, 118, 126, 125, 126, 126, 122, 119, 120, 122, 95, 111, 120, 130, 130, 126, 130, 128, 126, 121, 125, 125, 125, 133, 134, 123, 123, 131, 128, 129, 125, 127, 122, 98, 111, 119, 129, 123, 109, 117, 122, 122, 132, 126, 116, 119, 120, 119, 110, 129, 131, 126, 126, 128, 126, 131, 127, 125, 130, 127, 131, 129, 129, 129, 130, 131, 129, 133, 130, 130, 132, 131, 130, 128, 129, 128, 129, 127, 125, 122, 129, 129, 130, 133, 134, 127, 129, 137, 129, 135, 131, 134, 133, 131, 134, 137, 129, 133, 132, 131, 137, 135, 127, 135, 133, 131, 136, 131, 133, 132, 130, 132, 134, 130, 133, 132, 132, 133, 133, 131, 134, 133, 129, 134, 129, 134, 136, 135, 132, 132, 131, 136, 132, 132, 133, 135, 130, 135, 133, 131, 134, 134, 134, 135, 133, 136, 133, 130, 133, 130, 134, 129, 136, 135, 134, 131, 131, 135, 132, 130, 135, 129, 134, 135, 132, 135, 132, 131, 135, 134, 131, 133, 129, 131, 135, 133, 131, 128, 134, 132, 135, 130, 133, 133, 132, 131, 135, 130, 135, 133, 128, 137, 138, 130, 133, 131, 133, 135, 129, 132, 128, 133, 132, 137, 131, 131, 131, 132, 136, 134, 131, 136, 132, 131, 134, 130, 134, 132, 131, 136, 134, 131, 133, 132, 133, 132, 135, 133, 137, 135, 135, 139, 135, 133, 134, 133, 136, 137, 134, 131, 133, 134, 131, 134, 131, 133, 131, 132, 134, 133, 130, 132, 133, 133, 129, 127, 116, 130, 127, 123, 129, 129, 124, 128, 127, 136, 132, 107, 128, 129, 125, 135, 128, 113, 129, 124, 116, 134, 116, 130, 123, 128, 137, 135, 129, 133, 129, 120, 137, 134, 125, 130, 126, 121, 136, 124, 118, 130, 126, 137, 135, 131, 132, 123, 130, 136, 132, 127, 134, 128, 118, 120, 127, 127, 130, 130, 132, 125, 131, 129, 127, 120, 122, 114, 129, 129, 129, 129, 127, 127, 131, 130, 130, 123, 133, 127, 133, 129, 129, 127, 125, 127, 132, 127, 128, 128, 113, 130, 128, 132, 123, 128, 129, 134, 130, 118, 112, 107, 100, 111, 103, 69, 63, 60, 62, 62, 47, 42, 42, 37, 37, 38, 30, 26, 25, 24, 23, 21, 18, 18, 14, 13, 13, 11, 10, 8, 7, 7, 6, 0, 0, 0, 5, 9, 10, 10, 9, 9, 10, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        };

        const duration = 220000;
        const initialState = {
            player: {
                currentTime: 0,
                currentTrack: {
                    duration,
                    id
                },
                player: {
                    _currentTime: 0,
                    seek: function(ms) {
                        this._currentTime = ms;
                    },
                    currentTime: function() {
                        return this._currentTime;
                    }
                }
            }
        };

        const mockStore = configureStore([seek]);

        const store = mockStore(() => {
            const actions = store.getActions();
            const lastAction = actions[actions.length - 1];
            if (lastAction && lastAction.type === SET_CURRENT_TIME) {
                return {
                    player: { ...initialState.player, currentTime: lastAction.payload}
                };
            }
            return initialState;
        });

        const {container, queryByTestId} = render(
            <Provider store={store}>
                <Waveform waveform={waveform} id={id}/>
            </Provider>
        );
        const loader = queryByTestId('loader');
        expect(container).not.toContainElement(loader);

        const event = new MouseEvent('click', {
            bubbles: true,
            cancelable: true,
        });

        const offsetX = 200;
        const width = '1000px';
        Object.defineProperty(event, 'offsetX', {get: () => offsetX});

        const timeLine = queryByTestId('timeLine');
        timeLine.style.width = width;

        fireEvent(timeLine, event);

        let percents = offsetX / parseInt(width) * 100;
        let seekMs = duration / 100 * percents;
        expect(store.getActions()[0]).toEqual(seekTo(seekMs));

        const currentTime = store.getState().player.player.currentTime();
        store.dispatch(setCurrentTime(currentTime));
        expect(store.getActions()[1]).toEqual(setCurrentTime(currentTime));

        expect(queryByTestId('waveformCurrentTimeLinePosition')).toHaveStyle(`width: ${percents}`);
    });
});